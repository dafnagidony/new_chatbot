var _ = require('lodash');
var express = require('express');
var path = require('path');
var plugins = require('./plugins');
var routes = require('./routes');
var utils = require('obil-utils');
var metrics = utils.metrics;
var logger = utils.logger;
var helpers = utils.helpers;
var debug = utils.core.debug('obil:server:app');


/**
 * App module
 * @class App(options)
 * @param {Object} options Configuration
 * @param {Number} options.aclFree Disable ACL
 * @param {Array}  options.connections Connections required for application
 * @param {Object} options.locals Local variables within application
 * @param {Object} options.logger Logger
 * @param {Object} options.logger.format Logger format
 * @param {Object} options.logger.options Logger options
 * @param {String} options.logger.options.outputFormat Possible format is json or inline
 * @param {String} options.logger.options.sink Logmagic function that handles disposing log. Available options: stdout, logstash
 * @param {String} options.logger.options.logDirectory Log directory where logs are stored
 * @param {Number} options.logger.options.logToFile Set if logs should be saved in file or output in console (available only for inline logs)
 * @param {Object} options.metrics Metrics
 * @param {String} options.metrics.host Metrics host
 * @param {Number} options.metrics.port Metrics port
 * @param {Object} options.metrics.options Metrics options
 * @param {String} options.mountPoint Mount point where routes will be mounted (root by default)
 * @param {Array}  options.plugins Plugins (middleware)
 * @param {Array}  options.routes Routes (for route conf. see ./routes/index.js
 * @param {Object} options.routerOptions Router options (@link http://expressjs.com/4x/api.html#router)
 * @param {Object} options.session Session configuration (@link https://github.com/expressjs/session)
 * @returns {Object} Application
 */
function App(options) {
  const opts = _.defaultsDeep(options || {}, {
    connections: [],
    locals: {},
    logger: {
      type: 'obil',
      owner: 'vr'
    },
    metrics: {},
    mountPoint: '',
    plugins: [],
    routerOptions: {},
    routes: [],
    services: {},
    session: {}
  });
  var app = express();
  var metricsClient;
  var logSinks;
  var logstashSink;
  var metricsOptions;

  Object.keys(opts.locals).forEach(function(key) {
    app.locals[key] = opts.locals[key];
  });

  // enable session
  opts.connections.find(function(connection) {
    if (connection.session) {
      opts.session.store = connection.session.client;
      return true;
    }
    return false;
  });
  app.use(plugins.session.session(opts.session));

  // enable logger
  logSinks = logger.createOBSinks(opts.logger.type, opts.logger.owner, opts.logger);
  if (opts.logger.sink === 'logstash') {
    logstashSink = logSinks.find(function(_sink) {
      return _sink.name === 'logstash';
    });
    app.set('logstashClient', logstashSink.client);
  }
  helpers.map().set('logger', logger.create('obil.server', opts.logger));
  app.use(plugins.logger(opts.logger));

  // register consumer's plugins
  opts.plugins.forEach(function(plugin) {
    app.use(plugin);
  });

  // enable metrics
  if (opts.metrics.host && opts.metrics.port) {
    metricsOptions = opts.metrics.options || {};
    metricsClient = new metrics.Client(
      opts.metrics.host,
      opts.metrics.port,
      metricsOptions
    );
    app.use(metrics.plugin(metricsClient)({
      timeByUrl: (metricsOptions.timeByUrl || true)
    }));
    app.set('metricsClient', metricsClient);
    debug.info('metrics initialized');
  }

  // setting routes
  app.on('start', function() {
    routes.register(opts).then(function(subapp) {
      app.use(path.join('/', opts.mountPoint), subapp);
      app.use(plugins.session.lostSession);
      app.use(plugins.errorHandler());
      app.use(plugins.apiErrorHandler());
      if (subapp.get('acl')) {
        app.set('acl', subapp.get('acl'));
      }
      app.emit('routesConnected');
    }).catch(function(err) {
      debug.error(err);
      throw new Error(err);
    });
  });

  debug.info('app initialized');
  return app;
}


module.exports = App;

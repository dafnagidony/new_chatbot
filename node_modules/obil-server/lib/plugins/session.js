var ENV = process.env;
var expressSession = require('express-session');
var RedisStore = require('connect-redis')(expressSession);
var debug = require('obil-utils').core.debug('obil:server:plugins.session');

/**
 * @function session
 * @desc Creates a session middleware with the given options.
 * @param {object} options
 * @see {@link https://github.com/expressjs/session|Session} for available `options`.
 * @returns {object}
 * @public
 */
exports.session = function session(options) {
  var opts = options || {};

  if (!opts.store) {
    debug.warn('[options.store] is not being set, will use MemoryStore');
  } else {
    opts.store = new RedisStore({
      client: opts.store,
      prefix: opts.prefix || 'obil:session:' + (ENV.NODE_ENV || 'development') + ':'
    });
  }

  if (!opts.secret) {
    debug.error('Server application require option [option.app.session.secret] in order to initialize server');
    throw new Error('Server application require option [option.app.session.secret] in order to initialize server');
  }

  return expressSession(opts);
};

/**
 * @function lostSession
 * @desc Determines if a session connection is lost, and logs it, if so.
 * @param {object} req
 * @param {object} res
 * @param {function} next
 * @returns {void}
 * @public
 */
exports.lostSession = function lostSession(req, res, next) {
  if (!req.session) {
    return next(new Error('Lost session'));
  }
  return next();
};

var aclHelper = require('./helpers/acl');
var acl = require('acl');
var utils = require('obil-utils');
var debug = utils.core.debug('obil:server:routes');
var promise = utils.core.promise;
var express = require('express');
var ENV = process.env;


var noAclRoutes = function noAclRoutes(localRoutes) {
  return localRoutes.every(function(route) {
    return route.aclFree;
  });
};


var buildRouter = exports.buildRouter = (router) => {
  return function routerBuilder() {
    var values = [];
    var i = 0;

    if (arguments.length < 3) {
      return new Error('Route definition has to have at least 3 arguments: method, path & handler');
    }
    for (; i < arguments.length; i++) {
      values.push(arguments[i]);
    }
    return router[values.shift()](values.shift(), values);
  };
};


var composeRoute = exports.createRoute = (router, route, plugin) => {
  if (!route.method || !route.path || !route.handler) {
    throw new Error('Missing required route attributes (method, path, handler)');
  }
  var args = [route.method.toLowerCase(), route.path];
  if (route.aclFree) {
    args.push(route.handler);
  } else {
    args.push(plugin, route.handler);
  }
  return buildRouter(router).apply(this, args);
};


var addGenericRoutes = function(router, opts) {
  var genericRoutes = [
    require('./help'),
    require('./ping'),
    require('./revision'),
    require('./version'),
    require('./selftest')(opts),
    require('./_info')
  ];
  genericRoutes.forEach(route => {
    composeRoute(router, route);
  });
  return router;
};


/**
 * register - add routes to express 'subapp' and returns it with (or without) ACL
 * @param {Object} options Application options
 * @param {Object} options.routerOptions Router options (@link http://expressjs.com/4x/api.html#router)
 * @param {Array}  options.routes Routes
 * @param {Object} options.routes[route] Route
 * @param {String} options.routes[route.method] Method
 * @param {String} options.routes[route.path] Path
 * @param {function} options.routes[route.handler] Handler
 */
exports.register = function register(options) {
  var opts = options || {};
  var subapp = express();
  var router;
  var routes = opts.routes || [];
  var locals = opts.locals || {};

  // copy app locals to express subapp
  Object.keys(locals).forEach(function(key) {
    subapp.locals[key] = locals[key];
  });

  // create router for array-defined routes
  if (Array.isArray(routes)) {
    router = express.Router(opts.routerOptions || {});
  }
  // when routes provided as function
  // assuming it is an express router
  // and set routes back to empty array-type
  if (typeof routes === 'function') {
    router = routes;
    routes = [];
  }
  addGenericRoutes(router, opts);

  return promise(function setRoutes(resolve, reject) {
    var aclConnection;
    var aclHelp =  new aclHelper();

    // no acl protected service
    if (opts.aclFree || noAclRoutes(routes)) {
      routes.forEach(function(route) {
        if (typeof route === 'function') {
          return router.use(route);
        }
        route.aclFree = 1;
        return composeRoute(router, route);
      });
      subapp.use(router);
      return resolve(subapp);
    }

    // acl protected access

    // find acl connection
    aclConnection = opts.connections.find(function(connection) {
      return connection.acl;
    });

    if (!aclConnection) {
      return reject(new Error('ACL cannot be activated without acl connection'));
    }

    aclHelp.store = aclConnection.acl;
    aclHelp.model = new acl(new acl.redisBackend(aclHelp.store.client, 'obil:acl:' + (ENV.NODE_ENV || 'development') + ':'));
    subapp.set('acl', aclHelp);
    routes.forEach(function(route) {
      if (typeof route === 'function') {
        return router.use(route);
      }
      return composeRoute(router, route, aclHelp.model.middleware(0, aclHelp.getUserId));
    });
    subapp.use(router);
    debug.info('ACL activated');
    return resolve(subapp);
  });
};

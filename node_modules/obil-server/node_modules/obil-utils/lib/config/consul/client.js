const consul = require('consul')();
var core = require('../../core');
var debug = core.debug('obil:utils:config:consul:client');
var promise = core.promise;
var settle = core.settle;


var getService = (list) => {
  if (list.length < 1) {
    throw new Error('Servers list is empty');
  }

  const max = list.length - 1;
  const index = Math.floor(Math.random() * (max + 1));

  return {
    host: list[index].Node.Address,
    port: list[index].Service.Port
  };
};


/**
 * getMachine
 *
 * Get list of machines registered under certain name
 *
 * @param {Object} options
 * @returns {Object} Agent
 */
var getMachine = exports.getMachine = function getMachine(options) {
  return promise((resolve, reject) => {
    consul.health.service(options, (err, list) => {
      if (err) {
        debug.error(`Unable to get service ${options.name} from Consul`, err);
        return reject(err);
      }

      try {
        return resolve(getService(list));
      } catch (e) {
        return reject(e);
      }
    });
  });
};


/**
 * promiseDiscoverableSerices
 *
 * Get list of promises for services presumably registered in discovery service
 *
 * @private
 * @param {Array} discoverbleServices
 * @param {Object} servicesConfiguration
 * @returns {Array} Promises
 */
var promiseDiscoverableServices = (discoverableServices, servicesConfiguration) => {
  return discoverableServices.map((serviceKey) => {
    return getMachine(servicesConfiguration[serviceKey]);
  });
};


/**
 *
 * discoverServices
 *
 * Provides way to augment services configuration with information from consul
 *
 * @param {Array} discoverableServices List of discoverble service configurations
 * @param {Object} servicesConfiguration Services configuration object
 * @returns {Object} servicesConfiguration augmented by discovery service
 */
exports.discoverServices = (discoverableServices, servicesConfiguration) => {
  var services = servicesConfiguration;
  return promise((resolve) => {
    settle(promiseDiscoverableServices(discoverableServices, services)).then((registries) => {
      if (registries) {
        registries.forEach((registry, idx) => {
          if (registry.status === 'resolved') {
            services[discoverableServices[idx]].host = `${registry.value.host}:${registry.value.port}`;
            debug.info(`discovered service ${discoverableServices[idx]}, will use new configuration accordingly`);
          } else {
            debug.error(`problem discovering '${discoverableServices[idx]}' service: ${registry.value}`);
          }
        });
      }
      return resolve(services);
    });
  });
};


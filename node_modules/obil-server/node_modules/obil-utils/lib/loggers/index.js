var logmagic = require('logmagic');
var clients = require('./sinks');
var sinks = [];
var rootOptions;
const LEVELS = require('./levels');

/**
 * Logger registerSink
 *
 * Pass logmagic output to registered sink
 */
var registerSink = exports.registerSink = logmagic.registerSink;


/**
 * Logger route
 *
 * Routes logmagic output
 */
var route = exports.route = function(routePoint, minLevel, sink) {
  logmagic.route(routePoint, LEVELS.indexOf(minLevel), sink);
};


/**
 * mergeOptions - merges object first applying (first) default
 * object, then applying overwrites
 *
 * @param {Object} o1
 * @param {Object} o2
 * @returns {Object} merged object
 */
function mergeOptions(o1, o2) {
  var o3 = {};
  var attr;
  for (attr in o1) {
    if (o1.hasOwnProperty(attr)) {
      o3[attr] = o1[attr];
    }
  }
  for (attr in o2) {
    if (o2.hasOwnProperty(attr)) {
      o3[attr] = o2[attr];
    }
  }
  return o3;
}

/**
 * createOBSinks
 *
 * Creates OB sinks with expected fields
 *
 * @param {String} type Type of the logger
 * @param {String} owner Owner of the logger
 * @param {Object} options Additional options
 * @returns {Object} sinks - logmagic output handlers
 */
exports.createOBSinks = (type, owner, options) => {
  var OBEvent = require('./obEvent');
  var opts = rootOptions = options || {};
  sinks = [];

  opts.event = new OBEvent(type, owner);

  clients.forEach(function(Client) {
    var sink = new Client(opts);
    registerSink(sink.name, sink.log.bind(sink));
    sinks.push(sink);
  });

  return sinks;
};


/**
 * create
 * @param {String} name Module name
 * @param {Object} options Additional options
 * @returns {Object} logger instance
 * @throws {TypeError}
 */
exports.create = (name, options) => {
  var opts = mergeOptions(rootOptions, options);
  var sink = opts.sink || 'stdout';
  var routePoint = '__root__';
  var minLevel = opts.minLevel || 'INFO';
  var logger;

  if (typeof name !== 'string') {
    throw new TypeError('name has to be a string');
  }
  logger = logmagic.local(name);
  routePoint = opts.route || name;

  try {
    route(routePoint, minLevel, sink);
  } catch (err) {
    console.log('Error routing logger', err);
  }
  return logger;
};


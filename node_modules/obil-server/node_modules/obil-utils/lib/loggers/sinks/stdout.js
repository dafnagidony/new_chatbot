var moment = require('moment');
const LEVELS = require('../levels');

/**
 * Stdout
 *
 * Logmagic Sink that sends line and JSON object to stdout
 *
 * @param {Object} options
 * @returns {Object} Sink
 * @throws {TypeError}
 */
function StdoutSink(options) {
  const name = 'stdout';
  const opts = Object(options);
  const event = Object(opts.event);

  Object.defineProperties(this, {
    name: {
      value: name,
      enumerable: true
    },
    event: {
      value: event,
      enumerable: true
    }
  });
}


/**
 * log
 *
 * function that logs data
 *
 * @param {String} module Module name which act as facility for particular log
 * @param {Number} level Log level represented by number
 * @param {String} message Message to be logged
 * @param {Object} obj Additional information to be logged
 * @returns {undefined}
 */
StdoutSink.prototype.log = function(module, level, message, obj) {
  var log;
  var msg;
  var attr;
  var timestamp = obj.event_time || new Date();
  var _level = level;
  var _event = this.event;

  if (_level > 7) {
    _level = 7;
  }

  log = {
    facility: module,
    level: LEVELS[_level],
    message: message
  };

  for (attr in obj) {
    if (obj.hasOwnProperty(attr)) {
      log[attr] = obj[attr];
    }
  }

  if (typeof _event.update === 'function') {
    _event.update(timestamp, message);
  }

  Object.keys(_event).forEach(function(key) {
    if (_event[key]) {
      log[key] = _event[key];
    }
  });
  msg = JSON.stringify(log);
  process.stdout.write(`${moment(timestamp).format('YYYY-MM-DD HH:mm:ss.SSS')} ${LEVELS[_level]} [${module}] [${message}]\n`);
  process.stdout.write(msg);
  process.stdout.write('\n');
};


module.exports = StdoutSink;

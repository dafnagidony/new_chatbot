var module = require('../../');
var pckg = require('../../package');
var nock = require('nock');
var request = require('supertest');
var routes = require('../../lib/routes');
var test = require('tape');
var express = require('express');
var connConfig = require('../helpers/connectionsConfig');
var servConfig = require('../helpers/servicesConfig');

test('Routes', {skip: false}, function(t) {
  t.test('should have register function', function(tt) {
    t.ok(routes.register() instanceof Promise, 'that returns promise');
    tt.end();
  });

  t.test('buildRouter should throw exception if with no min. args', function(tt) {
    tt.ok(routes.buildRouter(express.Router()).apply(this, ['get', '/foo']) instanceof Error, 'returns error');
    tt.end();
  });

  t.test('buildRouter should return express router', function(tt) {
    var noop = function(req, res, next) {
      tt.pass('handled');
      return next();
    };
    var router = routes.buildRouter(express.Router()).apply(this, ['get', '/foo', noop]);
    router.handle({url: '/foo', method: 'GET'}, {}, tt.end);
  });

  t.test('buildRouter should handled multiple handlers', function(tt) {
    tt.plan(2);
    var noop = function(req, res, next) {
      tt.pass('handled');
      return next();
    };
    var router = routes.buildRouter(express.Router()).apply(this, ['get', '/foo', noop, noop]);
    router.handle({url: '/foo', method: 'GET'}, {}, function() {});
  });

  t.test('createRoute throws error when route\'s missing required field', function(tt) {
    tt.plan(1);
    var route = {
      method: 'get',
      path: '/foo'
    };
    tt.throws(function() {
      routes.composeRoute(express.Router(), route);
    }, Error, 'Error');
    tt.end();
  });

  t.test('register routes accepts options.routes being an express router', function(tt) {
    var options = {};
    var router = express.Router();
    tt.plan(1);
    router.get('/bar', function(req, res) {
      res.send('is open');
    });
    options.routes = router;
    routes.register(options).then(function(app) {
      request(app)
        .get('/bar')
        .expect(200, function(err, res) {
          tt.equal(res.text, 'is open', 'handles custom route');
          tt.end();
        });
    });
  });

  t.test('in Server context', function(tt) {
    var artifact = {};

    function _eachDone(_artifact, callback) {
      return function(server) {
        _artifact.server = server;
        callback();
      };
    }

    function setupTest(ttt, options) {
      var opts = options || {};
      ttt.test('create server', function userInstance(tttt) {
        module.start(opts).then(_eachDone(artifact, tttt.end));
      });
    }

    function tearDown(ttt) {
      ttt.test('shut down server', function(tttt) {
        artifact.server.stop().then(_eachDone(artifact, tttt.end));
      });
    }

    setupTest(tt, {
      name: 'woop',
      session: {
        secret: 'foo'
      },
      aclFree: 1,
      healthCheck: function() {
        return {
          services: {
            foo: true
          },
          bar: false
        };
      },
      connections: connConfig,
      services: servConfig
    });
    tt.test('/ping should response', function(ttt) {
      request(artifact.server.app)
        .get('/ping')
        .expect(200, function(err, res) {
          ttt.equal(res.text, 'pong', 'with pong');
          ttt.end();
        });
    });
    tt.test('/version should response', function(ttt) {
      request(artifact.server.app)
        .get('/version')
        .expect(200, function(err, res) {
          var text = JSON.parse(res.text);
          ttt.equal(text.name, 'woop', 'with package name');
          ttt.equal(text.version, pckg.version, 'with package version');
          ttt.notOk(text.dependencies, 'with undefined dependencies');
          ttt.end();
        });
    });
    tt.test('/revision should response', function(ttt) {
      request(artifact.server.app)
        .get('/revision')
        .expect(200, function(err, res) {
          ttt.equal(res.text, 'unavailable', 'with unavailable');
          ttt.end();
        });
    });
    tt.test('/help should response', function(ttt) {
      request(artifact.server.app)
        .get('/help')
        .expect(200, function(err, res) {
          ttt.ok(/woop/.test(res.text), 'with content containing app name');
          ttt.end();
        });
    });
    tt.test('/selftest should response', function(ttt) {
      nock('http://localhost:3001')
        .get('/auth/ping')
        .reply(200, 'pong');
      nock('http://localhost:3002')
        .get('/pool/ping')
        .reply(200, 'pong');

      ttt.plan(3);
      request(artifact.server.app)
        .get('/selftest')
        .expect(200, function(err, res) {
          ttt.ok((res.body.connections.session.alive && res.body.connections.acl.alive), 'with active connection');
          ttt.ok((res.body.services.auth.alive && res.body.services.pool.alive && res.body.services.foo), 'with active services');
          ttt.notOk(res.body.bar, 'with property from healthCheck');
        });
    });
    tearDown(tt);
  });
});

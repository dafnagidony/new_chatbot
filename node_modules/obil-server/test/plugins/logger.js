var test = require('tape');
var module = require('../../lib/plugins').logger;
var request = require('supertest');
var http = require('http');
var split = require('split');

function noopMiddleware(req, res, next) {
  next();
}

function createLineStream(callback) {
  return split().on('data', callback);
}

function createServer(options, fn, fn1) {
  var opts = options || {};
  var logger = module(opts);
  var middle = fn || noopMiddleware;

  return http.createServer(function onRequest(req, res) {
    // prior alterations
    if (fn1) {
      fn1(req, res);
    }

    logger(req, res, function onNext(err) {
      // allow req, res alterations
      middle(req, res, function onDone() {
        if (err) {
          res.statusCode = 500;
          res.end(err.message);
        }

        res.setHeader('X-Sent', 'true');
        res.end((req.connection && req.connection.remoteAddress) || '-');
      });
    });
  });
}

// Commented out until we support logs to file
test('Log', {skip: true}, function(t) {
  t.test('Instance of log', function(tt) {
    var logNoFormat;
    var log;
    var logNoArgs;
    var noop = function() {};

    logNoFormat = module({stream: createLineStream(noop)});
    tt.equal(typeof logNoFormat, 'function', 'with no format still works ');
    log = module({format: 'tiny', stream: createLineStream(noop)});
    tt.equal(typeof log, 'function', 'created as function ');
    logNoArgs = module();
    tt.equal(typeof logNoArgs, 'function', 'created as function ');
    tt.end();
  });

  t.test('may overwrite', function(tt) {
    var cb = function(err, res, line) {
      tt.test('and format', function() {
        tt.ok(/^GET \/ 200 - - \d+\.\d{3} ms$/.test(line), 'with i.e. tiny');
        tt.end();
      });
    };

    var stream = createLineStream(function(line) {
      tt.test('options stream', function(ttt) {
        cb(null, null, line);
        ttt.end();
      });
    });

    request(createServer({
      format: 'tiny',
      options: {
        stream: stream
      }
    }))
      .get('/')
      .expect(200, cb);
  });

  t.test('should overwrite', function(tt) {
    var cb = function(err, res, line) {
      tt.test('and format', function() {
        tt.ok(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\sINFO\s\[obil-logger]\s\[-\]\sGET\s\/some/.test(line), 'with custom obil');
        tt.end();
      });
    };

    var stream = createLineStream(function(line) {
      tt.test('options stream', function(ttt) {
        cb(null, null, line);
        ttt.end();
      });
    });

    var pluginLocals = function(req, res, next) {
      req.app = {
        locals: {
          name: 'obil-logger'
        }
      };
      next();
    };

    request(createServer({
      options: {
        stream: stream
      }
    }, pluginLocals))
      .get('/some')
      .expect(200, cb);
  });
});

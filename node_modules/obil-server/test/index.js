var ENV = process.env;
var module = require('..');
var request = require('supertest');
var test = require('tape');
var utils = require('obil-utils');
var nock = require('nock');
var testHelper = utils.testHelper;
var connConfig = require('./helpers/connectionsConfig');
var servConsulConfig = require('./helpers/servicesConsulConfig');


test('Server', {skip: false}, function(t) {
  var artifact = {};

  function _eachDone(_artifact, callback) {
    return function(server) {
      _artifact.server = server;
      callback();
    };
  }

  function setupTest(tt, options) {
    var opts = options || {};
    tt.test('Server instance', function userInstance(ttt) {
      module.start(opts).then(_eachDone(artifact, ttt.end));
    });
  }

  function tearDown(tt) {
    tt.test('Shut down server', function(ttt) {
      artifact.server.stop().then(_eachDone(artifact, ttt.end));
    });
  }

  setupTest(t, {
    session: {
      secret: 'foo'
    },
    aclFree: 1
  });
  t.test('Module', function(tt) {
    tt.test('should export a function', function(ttt) {
      ttt.equal(typeof module, 'function');
      ttt.end();
    });

    tt.test('should export', function(ttt) {
      ttt.equal(typeof module.version, 'string', 'version as string');
      ttt.equal(typeof module.utils, 'object', 'utils as object');
      ttt.equal(typeof module.errors, 'function', 'errors as function');
      ttt.end();
    });

    tt.test('_port property should be undefined', function(ttt) {
      ttt.equal(module.port, undefined);
      ttt.notOk(typeof artifact.server.port === undefined);
      ttt.end();
    });
  });

  t.test('Instance', function(tt) {
    tt.test('should start', function(ttt) {
      ttt.ok(artifact.server.started);
      ttt.equal(typeof artifact.server, 'object', 'with server as object');
      ttt.equal(typeof artifact.server.server.address().address, 'string', 'with server host as string');
      ttt.equal(typeof artifact.server.server.address().port, 'number', 'with server port as number');
      ttt.equal(typeof artifact.server.version, 'string', 'with server version as string');
      ttt.notOk(artifact.metricsClient);
      ttt.end();
    });

    tt.test('should not start when already running', function(ttt) {
      artifact.server.start().catch(function(err) {
        ttt.equal(err.name, 'Error', 'throws Error');
        ttt.end();
      });
    });
    tt.test('should stop regardless of current state', function(ttt) {
      artifact.server.stop().then(function(server) {
        ttt.notOk(server.started);
        ttt.end();
      });
    });
    tt.test('should restart regardless of current state', function(ttt) {
      artifact.server.restart().then(function(server) {
        ttt.ok(server.started);
        ttt.end();
      });
    });
    tt.test('when running should resolve internal host and port', function(ttt) {
      ttt.equal(typeof artifact.server.server.address, 'function');
      ttt.equal(typeof artifact.server.server.address().address, 'string');
      ttt.equal(typeof artifact.server.server.address().port, 'number');
      ttt.end();
    });
  });
  tearDown(t);

  setupTest(t, {
    app: {
      metrics: {
        host: 'localhost',
        port: 1234
      },
      session: {
        secret: 'foo'
      },
      aclFree: 1
    }
  });
  t.test('Specific instance', function(tt) {
    tt.test('should expose metricsClient', function(ttt) {
      ttt.equal(typeof artifact.server.app.get('metricsClient'), 'object');
      ttt.equal(artifact.server.app.get('metricsClient').host, 'localhost');
      ttt.equal(artifact.server.app.get('metricsClient').port, 1234);
      ttt.end();
    });
  });
  tearDown(t);


  t.test('ACL', {skip: false}, function(tt) {
    setupTest(tt, {
      app: {
        session: {
          secret: 'fox1'
        },
        routes: [{
          method: 'GET',
          path: '/secret',
          handler: function(req, res) {
            res.json('OK');
          }
        }],
        plugins: [function(req, res, next) {
          req.session.userId = 2;
          next();
        }]
      },
      connections: connConfig
    });
    tt.test('should not allow guest to access /secret resource', function(ttt) {
      var app = artifact.server.app;
      var acl = app.get('acl');
      acl.model.allow([
        {
          roles: 'admin',
          allows: [
            { resources: '/secret', permissions: '*' }
          ]
        }, {
          roles: 'user',
          allows: [
            { resources: '/secret', permissions: 'get' }
          ]
        }, {
          roles: 'guest',
          allows: []
        }
      ]);
      acl.model.addUserRoles(1, 'user');
      acl.model.addUserRoles(2, 'guest');
      acl.model.addUserRoles(3, 'admin');

      request(artifact.server.app)
        .get('/secret')
        .expect(403, function(err, res) {
          var body = res.body;
          ttt.equal(body.message, 'Insufficient permissions to access resource');
          ttt.equal(res.status, 403);
          ttt.end();
        });
    });
    tearDown(tt);

    setupTest(tt, {
      app: {
        session: {
          secret: 'fox2'
        },
        routes: [{
          method: 'GET',
          path: '/secret',
          handler: function(req, res) {
            res.json('OK');
          }
        }, {
          method: 'PUT',
          path: '/secret',
          handler: function(req, res) {
            res.json('OK');
          }
        }],
        plugins: [function(req, res, next) {
          req.session.userId = 1;
          next();
        }]
      },
      connections: connConfig
    });
    tt.test('should allow user to access /secret resource', function(ttt) {
      var app = artifact.server.app;
      request(app)
        .get('/secret')
        .expect(200, function(err, res) {
          var body = res.body;
          ttt.equal(body, 'OK');
          ttt.equal(res.status, 200);
          ttt.end();
        });
    });

    tt.test('should not allow user to update /secret resource', function(ttt) {
      var app = artifact.server.app;
      request(app)
        .put('/secret')
        .expect(403, function(err, res) {
          var body = res.body;
          ttt.equal(body.message, 'Insufficient permissions to access resource');
          ttt.equal(res.status, 403);
          ttt.end();
        });
    });
    tearDown(tt);

    setupTest(tt, {
      app: {
        session: {
          secret: 'fox3'
        },
        routes: [{
          method: 'PUT',
          path: '/secret',
          handler: function(req, res) {
            res.json('OK');
          }
        }],
        plugins: [function(req, res, next) {
          req.session.userId = 3;
          next();
        }]
      },
      connections: connConfig
    });

    tt.test('should allow admin to update /secret resource', function(ttt) {
      var app = artifact.server.app;
      request(app)
        .put('/secret')
        .expect(200, function(err, res) {
          var body = res.body;
          ttt.equal(body, 'OK');
          ttt.equal(res.status, 200);
          ttt.end();
        });
    });

    tt.test('Remove data and close acl store', function(ttt) {
      ttt.plan(2);
      artifact.server.connections.forEach(function(connection) {
        Object.keys(connection).forEach(function(key) {
          var prefix = 'obil:' + key + ':' + (ENV.NODE_ENV || 'development') + ':*';
          testHelper.cleanRedis(connection[key], prefix, function() {
            ttt.pass();
          });
        });
      });
    });

    tearDown(tt);
  });

  setupTest(t, {
    app: {
      session: {
        secret: 'foo',
        saveUninitialized: false,
        resave: false
      },
      routes: [{
        method: 'GET',
        path: '/foo',
        handler: function(req, res) {
          if (req.session) {
            res.json('OK');
          }
        }
      }],
      aclFree: 1
    },
    connections: {
      session: connConfig.session
    }
  });

  t.test('Specific instance', function(tt) {
    tt.test('should set session middleware using connection', function(ttt) {
      request(artifact.server.app)
        .get('/foo')
        .expect(200, function(err, res) {
          var body = res.body;
          ttt.equal(body, 'OK');
          ttt.end();
        });
    });
  });
  tearDown(t);

  setupTest(t, {
    app: {
      session: {
        secret: 'foo',
        saveUninitialized: false,
        resave: false
      },
      routes: [{
        method: 'GET',
        path: '/logger',
        aclFree: 1,
        handler: function(req, res) {
          res.json('OK');
        }
      }],
      aclFree: 1,
      logger: {
        outputFormat: 'json',
        type: 'obil',
        owner: 'vr'
      },
      plugins: [function(req, res, next) {
        req.session.passport = {
          user: 2
        };
        next();
      }]
    },
    connections: {
      session: connConfig.session
    }
  });

  t.test('should log to JSON', function(tt) {
    request(artifact.server.app)
      .get('/logger')
      .expect(200, function(err, res) {
        var body = res.body;
        tt.equal(body, 'OK');
        tt.equal(res.status, 200);
        tt.end();
      });
  });
  tearDown(t);

  // bellow mocking for consul response
  nock('http://127.0.0.1:8500')
    .put('/v1/agent/service/register')
    .reply(200, 'OK');

  nock('http://127.0.0.1:8500')
    .get('/v1/agent/service/deregister/fooBar_3000')
    .reply(200, 'OK');

  nock('http://127.0.0.1:8500')
    .get('/v1/health/service/obil-auth-service?tag=environment-test&dc=dc1')
    .reply(200, [
      { Node:
        { Node: 'localhost.local',
          Address: '127.0.0.1'
        },
        Service:
        { ID: 'obil-auth-service_3001',
          Service: 'obil-auth-service',
          Port: 0,
          'ServiceTags': ['environment-test']
        }
      }
    ]);
  nock('http://127.0.0.1:8500')
    .get('/v1/health/service/obil-content-service')
    .reply(200, []);

  setupTest(t, {
    session: {
      secret: 'foo',
      saveUninitialized: false,
      resave: false
    },
    aclFree: 1,
    consul: {
      interval: '15s'
    },
    name: 'fooBar',
    services: servConsulConfig
  });

  t.test('Specific instance', function(tt) {
    tt.test('should register and deregister from consul and discover obil-auth-service', function(ttt) {
      request(artifact.server.app)
        .get('/selftest')
        .expect(200, function(err, res) {
          ttt.equal(res.body.services.auth.host, 'http://127.0.0.1:0', 'returns host augmented by consul');
          ttt.equal(res.body.services.content.host, 'http://localhost:3003/content', 'returns original host');
          ttt.end();
        });
    });
  });
  tearDown(t);
});

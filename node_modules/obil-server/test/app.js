var app = require('../lib/app');
var error = require('http-errors');
var fs = require('fs');
var moment = require('moment');
var path = require('path');
var request = require('supertest');
var test = require('tape');


/*
 * This file contains app (express) tests.
 * Is is preferable to test app in server context and place
 * tests in './index.js' file. Bellow tests will be moved
 * there gradually.
 */

function examplePlugin(req, res, next) {
  next();
}

function fileExists(filePath) {
  try {
    return fs.statSync(filePath).isFile();
  } catch (err) {
    return false;
  }
}

const exampleRoute = {
  method: 'GET',
  path: '/bar',
  handler: examplePlugin
};

test('App', {skip: false}, function(t) {
  t.test('should export a function', function(tt) {
    tt.equal(typeof app, 'function');
    tt.end();
  });

  t.test('should return function having locals as option', function(tt) {
    var options = {
      locals: {
        name: 'foo'
      },
      session: {
        secret: 'foo'
      }
    };
    var client = app(options);
    tt.equal(typeof client, 'function');
    tt.equal(client.locals.name, 'foo');
    tt.end();
  });

  t.test('should return function having plugin as option', function(tt) {
    var options = {
      plugins: [examplePlugin],
      locals: {
        name: 'foo'
      },
      session: {
        secret: 'foo'
      },
      aclFree: 1
    };
    tt.equal(typeof app(options), 'function');
    tt.end();
  });

  t.test('should return function having routes as option', function(tt) {
    var options = {
      routes: [examplePlugin, exampleRoute],
      locals: {
        name: 'foo'
      },
      session: {
        secret: 'foo'
      },
      aclFree: 1
    };
    tt.equal(typeof app(options), 'function');
    tt.end();
  });

  t.test('should initialize metrics having metrics as options and expose it', {skip: false}, function(tt) {
    var options = {
      metrics: {
        host: 'localhost',
        port: 1234
      },
      session: {
        secret: 'foo'
      },
      locals: {
        name: 'foo'
      },
      aclFree: 1
    };
    var appInst = app(options);
    tt.equal(typeof appInst, 'function');
    tt.equal(typeof appInst.get('metricsClient'), 'object');
    tt.equal(appInst.get('metricsClient').port, 1234);
    tt.equal(appInst.get('metricsClient').host, 'localhost');
    tt.end();
  });

  t.test('should error out with no implementation', function(tt) {
    var options = {
      plugins: [function(req, res, next) {
        next(error(501, 'lol'));
      }],
      locals: {
        name: 'obil-server'
      },
      session: {
        secret: 'foo'
      },
      aclFree: 1
    };

    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .get('/')
      .expect(501, function(err, res) {
        var body = res.body;
        tt.equal(body.message, 'Not Implemented');
        tt.equal(body.status, 501);
        tt.end();
      });
  });

  t.test('should error out with message and status', function(tt) {
    var options = {
      plugins: [function(req, res, next) {
        next(error(401, null, {
          type: 'a',
          code: 'b'
        }));
      }],
      aclFree: 1,
      session: {
        secret: 'foo'
      }
    };
    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .get('/')
      .expect(401, function(err, res) {
        var body = res.body;
        tt.equal(body.message, 'Unauthorized');
        tt.equal(body.status, 401);
        tt.equal(body.type, 'a');
        tt.equal(body.code, 'b');
        tt.end();
      });
  });

  t.test('api errors should error with message, status, type & code', function(tt) {
    var options = {
      routes: [{
        method: 'POST',
        path: '/boom',
        aclFree: 1,
        handler: function(req, res, next) {
          next(error(404, 'no resource', {
            type: 'a',
            code: 'b'
          }));
        }
      }],
      session: {
        secret: 'foo'
      }
    };
    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .post('/boom')
      .expect(404, function(err, res) {
        var body = res.body;
        tt.equal(body.message, 'no resource');
        tt.equal(body.status, 404);
        tt.equal(body.type, 'a');
        tt.equal(body.code, 'b');
        tt.end();
      });
  });

  t.test('app error should error out with message & stack', function(tt) {
    var options = {
      routes: [{
        method: 'GET',
        path: '/error',
        aclFree: 1,
        handler: function(req, res, next) {
          var err = new Error('Some app error');
          next(err);
        }
      }],
      locals: {
        name: 'obil-server'
      },
      session: {
        secret: 'foo'
      }
    };
    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .get('/error')
      .expect(500, function(err, res) {
        var body = res.body;
        tt.equal(body.status, 500);
        tt.equal(typeof body.stack, 'string');
        tt.equal(body.message, 'Internal Server Error');
        tt.end();
      });
  });

  t.test('should error out when session lost', function(tt) {
    var options = {
      routes: [{
        method: 'GET',
        path: '/no-session',
        aclFree: 1,
        handler: function(req, res, next) {
          req.session.destroy(function() {
            next();
          });
        }
      }],
      locals: {
        name: 'obil-server'
      },
      session: {
        secret: 'foo'
      }
    };
    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .get('/no-session')
      .expect(500, function(err, res) {
        var body = res.body;
        tt.equal(body.status, 500);
        tt.equal(body.message, 'Internal Server Error');
        tt.end();
      });
  });

  // Commented out until we support logs to file
  t.test('should output logs into log file', {skip: true}, function(tt) {
    var options = {
      routes: [{
        method: 'GET',
        path: '/foo',
        aclFree: 1,
        handler: function(req, res) {
          res.json('OK');
        }
      }],
      locals: {
        name: 'obil-server'
      },
      logger: {
        options: {
          logToFile: true
        }
      },
      session: {
        secret: 'foo'
      }
    };

    var regex = /INFO\s\[obil-server\]/;
    var folder = path.join(process.cwd(), 'log');
    var file = path.join(folder, 'access-' + moment().format('YYYY-MM-DD') + '.log');
    var appInst = app(options);
    appInst.emit('start');

    request(appInst)
      .get('/foo')
      .expect(200, function() {
        tt.test('and contain custom log', function(ttt) {
          fs.readFile(file, 'utf-8', function(err, data) {
            ttt.ok(regex.test(data), 'with data');
            ttt.end();
          });
        });
        tt.test('teardown', function(ttt) {
          fs.unlinkSync(file);
          fs.rmdirSync(folder);
          ttt.notOk(fileExists(folder), 'by removing log folder');
          ttt.end();
        });
      });
  });

  t.test('should mount routes behind mount point', function(tt) {
    var options = {
      routes: [{
        method: 'GET',
        path: '/baz',
        aclFree: 1,
        handler: function(req, res) {
          res.json('OK');
        }
      }],
      mountPoint: 'bar',
      session: {
        secret: 'foo'
      }
    };
    var appInst = app(options);
    appInst.emit('start');
    request(appInst)
      .get('/bar/baz')
      .expect(200, function(err, res) {
        var body = res.body;
        tt.equal(body, 'OK');
        tt.equal(res.status, 200);
        tt.end();
      });
  });
});

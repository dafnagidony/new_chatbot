var test = require('tape');
var module = require('../..').store.session;
var core = require('../../').core;
var redisSrv = require('../helpers/redis-server');
var fakeredis = require('fakeredis');
var sessionStore;

test('Session', {skip: false}, function(t) {
  t.test('should export', function(tt) {
    tt.equal(typeof module, 'object', 'itself an object');
    tt.equal(typeof module.create, 'function', 'module.session as function');
    tt.end();
  });
  t.end();
});


function lifecycleTest(localStore, t) {
  var _store = localStore.client;
  t.plan(5);

  return redisSrv.connect(true)
    .then(function() {
      return core.promise(function setRedisValue(resolve, reject) {
        _store.set('123', 'abc', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.equal(ok, 'OK', '#set() 123');
      return core.promise(function getRedisValue(resolve, reject) {
        _store.get('123', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(data) {
      return t.equal(data, 'abc', '#get() ok');
    })
    .then(function() {
      return core.promise(function setRedisValue(resolve, reject) {
        _store.set('123', '', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.equal(ok, 'OK', '#set() 123');
      return core.promise(function setRedisValue(resolve, reject) {
        _store.del('123', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.equal(ok, 1, '#destroy() ok');
      return _store.quit(function() {
        t.pass();
      });
    });
}

function setupStore(t) {
  t.test('Session store instance', {skip: false}, function storeInstanceCreate(tt) {
    var client = fakeredis.createClient();
    tt.plan(1);
    sessionStore = module.create({client: client});
    tt.equal(sessionStore.client.connected, true);
  });
}

setupStore(test);

test('Module session', {skip: false}, function(t) {
  lifecycleTest(sessionStore, t);
});

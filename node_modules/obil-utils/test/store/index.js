var test = require('tape');
var path = require('path');
var module = require('../..').store;
var store = require('../../lib/store/redisStore/redis');
var fakeredis = require('fakeredis');
var FAKE_REDIS = true;
var ENV = process.env;
var host = (!ENV.NODE_ENV || ENV.NODE_ENV === 'development') ? '127.0.0.1' : 'redis1-19001-stg-chidc2.chidc2.outbrain.com';
var storeOptions = {
  store: {
    host: host,
    port: 6379,
    database: 1
  },
  storeClient: {
    connect_timeout: 9000,
    ttl: (60 * 60 * 24 * 30)
  }
};

test('Store', {skip: false}, function(t) {
  t.test('Module', function(tt) {
    tt.test('should export', function(ttt) {
      ttt.equal(typeof module, 'object', 'itself as object');
      ttt.equal(typeof module.session, 'object', 'expose session as object');
      ttt.equal(typeof module.connectToStore, 'function', 'expose connectToStore function');
      ttt.end();
    });
    tt.end();
  });

  function setupStore(tt) {
    tt.test('Setup store', function storeInstanceCreate(ttt) {
      var client = fakeredis.createClient();
      ttt.plan(1);
      if (FAKE_REDIS) {
        client.fake = FAKE_REDIS;
        storeOptions.client = client;
      }
      module.connectToStore(storeOptions).then(function(_store) {
        ttt.equal(_store.client.connected, true, 'connect');
      });
    });
  }

  setupStore(t);

  t.test('Functions', function(tt) {
    var connectionsMap = [];
    tt.test('connectToStore', function(ttt) {
      ttt.plan(1);
      module.connectToStore().then(function(_store) {
        ttt.equal(_store.client.connected, true, 'is connecting');
      }).catch(function(_store) {
        _store.close().then(function() {
          ttt.pass();
        });
      });
    });

    tt.test('connectionsProvider & establishConnections', function(ttt) {
      var configuration = {
        foo: {
          type: 'redis',
          host: host,
          port: 6379,
          db: 0
        },
        bar: {
          type: 'redis',
          host: host,
          port: 6379,
          db: 1
        },
        baz: {
          protocol: 'sqlite',
          database: path.resolve(__dirname, '../fixtures/store/orm/test.db'),
          query: {
            debug: true
          }
        }
      };
      var connections = module.connectionsProvider(configuration);
      ttt.equal(connections.length, 3, 'contains 3 elements');
      connections.forEach(function(connection) {
        ttt.ok(connection instanceof Promise, 'being instance of Promise');
      });

      module.establishConnections(connections, configuration).then(function(results) {
        ttt.equal(results.length, 3, 'contains 3 elements');
        ttt.ok(results[0][Object.keys(results[0])[0]] instanceof store, '1 resolves with instance of store');
        ttt.ok(results[1][Object.keys(results[1])[0]] instanceof store, '2 resolves with instance of store');
        ttt.equal(results[2][Object.keys(results[2])[0]].driver_name, 'sqlite', '3 has set driver_name sqlite');
        connectionsMap = results;
        ttt.end();
      });
    });

    tt.test('closeConnections', function(ttt) {
      ttt.plan(1);
      // TODO: fix for fakeredis problem with closing connection
      if (!FAKE_REDIS) {
        module.closeConnections(connectionsMap).then(function(results) {
          ttt.notOk(results[0][Object.keys(results[0])[0]].active, 'deactivates connection');
        });
      } else {
        ttt.pass();
      }
    });
  });
});

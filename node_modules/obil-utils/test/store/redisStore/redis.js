var test = require('tape');
var module = require('../../..').store;
var core = require('../../../').core;
var redisSrv = require('../../helpers/redis-server');
var fakeredis = require('fakeredis');
var store;


function lifecycleTest(localStore, t) {
  var _store = localStore.client;
  t.plan(6);

  return redisSrv.connect(true)
    .then(function() {
      return core.promise(function setRedisValue(resolve, reject) {
        _store.set('123', 'abc', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.equal(ok, 'OK', '#set() 123');
      return core.promise(function getRedisValue(resolve, reject) {
        _store.get('123', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(data) {
      t.equal('abc', data, '#get() ok');
    })
    .then(function() {
      return core.promise(function setRedisValue(resolve, reject) {
        _store.set('123', '', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.equal(ok, 'OK', '#set() 123');
      return core.promise(function setRedisValue(resolve, reject) {
        _store.del('123', function(err, repl) {
          if (err) {
            return reject(err);
          }
          return resolve(repl);
        });
      });
    })
    .then(function(ok) {
      t.ok(ok, '#del() ok');
      localStore.on('redisDisconnected', function() {
        t.ok(true, 'redisDisconnected emited');
      });
      return localStore.close().then(function() {
        t.pass();
      });
    });
}


function setupStore(t) {
  t.test('Store instance', {skip: false}, function storeInstanceCreate(tt) {
    var client = fakeredis.createClient();
    tt.plan(1);
    client.fake = true;
    /* you may try testing against real redis
    var client = require('redis').createClient();
    */
    module.connectToStore({store: {host: 'localhost'}, client: client}).then(function(promisedStore) {
      store = promisedStore;
      tt.equal(store.client.connected, true, 'is connected');
    });
  });
}

setupStore(test);

test('Store', {skip: false}, function(t) {
  t.test('Module', function(tt) {
    tt.test('should export', function(ttt) {
      ttt.equal(typeof module, 'object', 'itself as object');
      ttt.equal(typeof module.connectToStore, 'function', 'expose connectToStore as function');
      ttt.end();
    });

    tt.end();
  });

  t.test('Instance', function(tt) {
    tt.test('should have close', function(ttt) {
      ttt.equal(typeof store.close, 'function', 'as function');
      ttt.end();
    });

    tt.test('should have client', function(ttt) {
      ttt.equal(typeof store.client, 'object', 'object');
      ttt.end();
    });

    tt.test('should set connect flag on client when connected', function(ttt) {
      ttt.ok(store.client.connected, 'to true');
      ttt.end();
    });

    tt.test('should run through lifecycle test', function(ttt) {
      return lifecycleTest(store, ttt);
    });

    tt.end();
  });

  t.end();
});

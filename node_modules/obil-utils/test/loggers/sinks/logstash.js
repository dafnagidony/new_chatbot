var dgram = require('dgram');
var tape = require('tape');
var os = require('os');

var logger = require('../../..').logger;
var LogstashSink = require('../../../lib/loggers/sinks/logstash');


tape('Logstash Sink', {skip: false}, (t) => {
  var mockServer;
  var logstash;
  var createMockServer;
  var log;
  const LOGSTASH_PORT = 55414;

  createMockServer = (port, processMessage) => {
    var server = dgram.createSocket('udp4', processMessage);
    server.on('listening', () => {});
    server.bind(port);
    return server;
  };

  t.test('logstash client', {skip: false}, (tt) => {
    var logClients;
    var logClient;
    tt.throws(() => {
      logger.logstashClient();
    }, TypeError, 'when no args throws type error');
    tt.throws(() => {
      logger.logstashClient('type');
    }, TypeError, 'with 1 arg throws type error');
    tt.throws(() => {
      logger.logstashClient('', '');
    }, TypeError, 'with 2 empty args throws type error');
    logClients = logger.createOBSinks('type', 'owner');
    logClient = logClients.find((_sink) => {
      return _sink.name === 'logstash';
    });
    tt.ok(logClient instanceof LogstashSink, 'returns instance of LogstashSink');
    tt.equal(typeof logClient.log, 'function', 'client returns');
    tt.end();
  });

  t.test('create it', (tt) => {
    var obSinks = logger.createOBSinks('type', 'owner', {
      port: LOGSTASH_PORT
    });
    logstash = obSinks.find((_sink) => {
      return _sink.name === 'logstash';
    });
    log = logger.create('test.logstash', {
      sink: 'logstash'
    });
    tt.end();
  });

  t.test('send a udp packet containing valid json', (tt) => {
    mockServer = createMockServer(logstash.port, (data) => {
      var obj = JSON.parse(data);
      tt.equal(obj.facility, 'test.logstash');
      tt.equal(obj.message, 'just a log');
      tt.equal(obj.level, 'INFO');
      tt.equal(obj.host, os.hostname());
      tt.equal(obj.test, 'foobar');
      tt.equal(obj.obowner, 'owner');
      tt.equal(obj.obtype, 'type');
      tt.equal(obj.obmessage, 'just a log');
      tt.end();
    });

    log.info('just a log', {test: 'foobar'});
  });

  t.test('close mock', (tt) => {
    mockServer.close(() => {
      tt.end();
    });
  });

  t.test('close client', (tt) => {
    logstash.client.close(() => {
      tt.end();
    });
  });
});

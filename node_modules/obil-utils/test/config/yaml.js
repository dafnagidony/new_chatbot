var test = require('tape');
var rewire = require('rewire');
var configYaml = rewire('../../lib/config/yaml');
var path = require('path');
var fixturePath = path.join(path.resolve(__dirname), '../fixtures/config/settings.yml');

test('Configuration Yaml', {skip: false}, function(t) {
  t.test('read', function(tt) {
    var config;
    tt.throws(function() {
      configYaml.read();
    }, ReferenceError, 'throws reference error');
    configYaml.__set__('path', fixturePath);
    config = configYaml.read();
    tt.equal(config.REDIS_STANDALONE, 'redis', 'loads key value');
    tt.equal(config.REDIS.main.port, 6379, 'loads key value');
    tt.end();
  });

  t.test('getProperty', function(tt) {
    configYaml.read();
    tt.notOk(configYaml.getProperty({}), 'returns false when called with wrong type');
    tt.equal(configYaml.getProperty('REDIS.main.port'), 6379, 'returns value');
    tt.equal(configYaml.getProperty('foo.bar'), undefined, 'missing key returns undefined');
    tt.end();
  });

  t.test('load', function(tt) {
    var localConfig = {
      connections: {
        session: {
          host: '127.0.0.1',
          port: 3010,
          env: 'development'
        }
      }
    };
    var configMap = {
      connections: {
        session: {
          host: 'REDIS.main.host'
        }
      }
    };
    configYaml.__set__('path', '/etc/vr/development.yaml');
    tt.test('with no configYaml', function(ttt) {
      var result = configYaml.load(['staging', 'production'], localConfig, configMap);
      ttt.equal(result.connections.session.host, '127.0.0.1', 'returns local conf. for none managed env.');
      result = configYaml.load(['development'], localConfig, configMap);
      ttt.equal(result.connections.session.host, '127.0.0.1', 'for manged env. but when file not found, still returns local conf.');
      ttt.end();
    });

    tt.test('with configYaml', function(ttt) {
      var result;
      configYaml.__set__('path', fixturePath);
      result = configYaml.load(['development', 'jenkins'], localConfig, configMap);
      ttt.equal(result.connections.session.host, 'redis', 'returns infra conf. for managed env.');
      ttt.end();
    });
  });
});

#!/bin/bash

# PROJECT_NAME defaults to the name of root folder
PROJECT_NAME=$(basename $PWD)

# BUILD_DIR name of directory where artifact lands
BUILD_DIR="out"

# PACKAGE_VERSION extracting version from package.json
PACKAGE_VERSION=$(cat package.json \
  | grep version \
  | head -1 \
  | awk -F: '{ print $2 }' \
  | sed 's/[", ]//g' )

# ARTIFACT name of artifact archive
ARTIFACT="$PROJECT_NAME.tar"

# PROJECT_NAME_VERSIONED name with artifact archive with version
if !([ -z "${PACKAGE_VERSION// }" ]); then
    PROJECT_NAME_VERSIONED="${PROJECT_NAME}_${PACKAGE_VERSION}"
    ARTIFACT_VERSIONED="${PROJECT_NAME_VERSIONED}.tar"
fi

# Removing old artifacts
if [ -f "$BUILD_DIR/$ARTIFACT.gz" ]; then
    rm "$BUILD_DIR/$ARTIFACT.gz"
fi
if [ -f "$BUILD_DIR/$ARTIFACT_VERSIONED.gz" ]; then
    rm "$BUILD_DIR/$ARTIFACT_VERSIONED.gz"
fi

# Creating build directory
if !([ -d "$BUILD_DIR" ]); then
    mkdir $BUILD_DIR
fi

# Creating artifacts
cd ..
tar -zcvf "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.gz" --exclude 'node_modules' --exclude '.git' --exclude 'bin' --exclude ${BUILD_DIR} "${PROJECT_NAME}/"

if !([ -z "$PROJECT_NAME_VERSIONED" ]); then
    ln -s $PROJECT_NAME $PROJECT_NAME_VERSIONED
    tar -zcvf "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT_VERSIONED}.gz" --exclude 'node_modules' --exclude '.git' --exclude 'bin' --exclude ${BUILD_DIR} "$PROJECT_NAME_VERSIONED/."
    rm $PROJECT_NAME_VERSIONED
fi
cd $PROJECT_NAME



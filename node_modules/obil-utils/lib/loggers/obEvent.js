var moment = require('moment');


/**
 * OBEvent
 *
 * Event for OB Architecture
 *
 * @param {String} type
 * @param {String} owner
 * @param {Array} tags
 * @returns {Object} Sink
 * @throws {TypeError}
 */
function OBEvent(type, owner, tags) {
  var _message;
  var _timestamp;

  if (!(type && owner) || [type, owner].every(elem => typeof elem !== 'string')) {
    throw new TypeError('type & owner must be provided');
  }

  Object.defineProperties(this, {
    obmessage: {
      get: function() {
        return _message;
      },
      set: function(state) {
        _message = state;
      },
      enumerable: true
    },
    obowner: {
      value: owner,
      enumerable: true
    },
    obtags: {
      value: tags,
      enumerable: true
    },
    obtimestamp: {
      get: function() {
        return _timestamp;
      },
      set: function(state) {
        _timestamp = state;
      },
      enumerable: true
    },
    obtype: {
      value: type,
      enumerable: true
    }
  });
}

OBEvent.prototype.update = function(timestamp, message) {
  var _timestamp = timestamp || new Date();
  this.obtimestamp = moment(_timestamp).format('YYYY-MM-DD HH:mm:ss.SSS');
  this.obmessage = message || '';
};

module.exports = OBEvent;

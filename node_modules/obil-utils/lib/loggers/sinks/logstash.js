var dgram = require('dgram');
var os = require('os');
const LOGSTASH_PORT = 55514;
const LOGSTASH_HOST = 'localhost';
const LEVELS = require('../levels');


/**
 * LogstashSink
 *
 * Logmagic Sink that sends JSON object over UDP to localhost
 *
 * @param {Object} options
 * @returns {Object} Sink
 * @throws {TypeError}
 */
function LogstashSink(options) {
  const name = 'logstash';
  const opts = Object(options);
  const host = opts.host || LOGSTASH_HOST;
  const port = opts.port || LOGSTASH_PORT;
  const event = Object(opts.event);
  const dryRun = opts.dryRun || false;
  var _client = dgram.createSocket('udp4');

  Object.defineProperties(this, {
    client: {
      get: function() {
        return _client;
      },
      set: function(state) {
        _client = state;
      },
      enumerable: true
    },
    dryRun: {
      value: dryRun,
      enumerable: true
    },
    host: {
      value: host,
      enumerable: true
    },
    name: {
      value: name,
      enumerable: true
    },
    port: {
      value: port,
      enumerable: true
    },
    event: {
      value: event,
      enumerable: true
    }
  });
}

/**
 * log
 *
 * function that logs data
 *
 * @param {String} module Module name which act as facility for particular log
 * @param {Number} level Log level represented by number
 * @param {String} message Message to be logged
 * @param {Object} obj Additional information to be logged
 * @returns {undefined}
 */
LogstashSink.prototype.log = function(module, level, message, obj) {
  var log;
  var msg;
  var buf;
  var attr;
  var timestamp = obj.event_time || new Date();
  var _level = level;
  var _event = this.event;

  if (_level > 7) {
    _level = 7;
  }

  log = {
    facility: module,
    level: LEVELS[_level],
    host: os.hostname(),
    message: message
  };

  for (attr in obj) {
    if (obj.hasOwnProperty(attr)) {
      log[attr] = obj[attr];
    }
  }

  if (typeof _event.update === 'function') {
    _event.update(timestamp, message);
  }

  Object.keys(_event).forEach(function(key) {
    if (_event[key]) {
      log[key] = _event[key];
    }
  });

  msg = JSON.stringify(log);
  buf = new Buffer(msg);

  if (this.dryRun) {
    process.stdout.write(msg);
  }
  return this.client.send(buf, 0, buf.length, this.port, this.host);
};


module.exports = LogstashSink;

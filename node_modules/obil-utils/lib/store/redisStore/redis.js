var redis = require('redis');
var core = require('../../core');
var debug = core.debug('obil:utils:store');
var events = require('events');
var EventEmitter = events.EventEmitter;

var DEFAULT_PORT = 6379;
var DEFAULT_HOST = '127.0.0.1';


/**
 * @class Store (redis)
 * @desc  Store class constructor
 * @param {<Object>} options Options for constructing store
 * @param {<Object>} options.client Predefined Redis client
 * @param {<Object>} options.store Store options
 * @param {<String>} options.store.host Host
 * @param {<String>} options.store.port Port
 * @param {<String>} options.store.socket Socket
 * @param {<String>} options.store.database DB name
 */
function Store(options) {
  var _client = null;
  var _active = false;
  var self = this;

  events.EventEmitter.call(this);

  if (options.client) {
    _client = options.client;
  } else if (options.store && options.store.socket) {
    _client = redis.createClient(options.store.socket, options.store);
  } else if (options.store && (options.store.port || options.store.host)) {
    _client = redis.createClient(
      options.store.port || DEFAULT_PORT,
      options.store.host || DEFAULT_HOST,
      options.store
    );
  } else {
    _client = redis.createClient(options.store);
  }

  if (options.store && options.store.database) {
    if (typeof options.store.database !== 'number') {
      debug.warn('store expects a number for the "db" option');
    }

    _client.select(options.store.database);
    _client.on('connect', function() {
      _client.select(options.store.database);
    });
  }

  _client.on('error', function(e) {
    debug.error('Redis error: err', e);
    self.emit('disconnect', e);
    _active = false;
  });

  _client.on('connect', function() {
    debug.info('Redis start listening at http://%s:%s', self.options.store.host, self.options.store.port);
    _active = true;
  });

  _client.on('end', function() {
    _active = false;
  });

  if (_client.fake) {
    // emit event for fake redis client
    setTimeout(function() {
      _client.emit('connect');
    }, 100);
  }

  self.emit('connecting');

  Object.defineProperties(this, {
    active: {
      get: function() {
        return _active;
      },
      enumerable: true
    },
    options: {
      value: options
    },
    client: {
      get: function() {
        return _client;
      },
      set: function(state) {
        _client = state;
      }
    }
  });
}


/**
 * Point Store.__proto to EventEmitter prototype to
 * inherit from EventEmitter
 */
Store.prototype.__proto__ = EventEmitter.prototype;


/**
 * @function close
 * @desc Close connection to store and terminate process
 * @returns {<Object>} promise Promise fulfilled store instance
 */
Store.prototype.close = function close(cb) {
  const self = this;

  function closeHandler() {
    debug.info('Redis stopped listening at http://%s:%s', self.options.store.host, self.options.store.port);
    self.emit('redisDisconnected');
  }

  if (typeof cb === 'function') {
    return self.client.quit(function() {
      closeHandler();
      return cb();
    });
  }

  return core.promise(function closeStore(resolve) {
    self.client.quit(function() {
      closeHandler();
      return resolve(self);
    });
  });
};


/**
 * @function createStore
 * @desc creates store
 * @returns {Object} Instance of Store class
 */
Store.createStore = function(options) {
  return (new Store(options));
};

module.exports = Store;

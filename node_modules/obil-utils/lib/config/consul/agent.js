var ENV = process.env;
var core = require('../../core');
var consul = require('consul');
var url = require('url');
var debug = core.debug('obil:utils:config:consul:agent');
var promise = core.promise;
var agents = {};

var createTags = (options) => {
  var tags = [];

  if (options.tags) {
    tags = tags.concat(options.tags);
  }

  ['cluster',
   'configRevision',
   'contextPath',
   'environment',
   'httpPort',
   'httpsPort',
   'jmxPort',
   'mountPoint',
   'owner',
   'port',
   'serviceType',
   'version']
    .forEach(function(property) {
      if (options[property]) {
        tags.push(`${property}-${options[property]}`);
      }
    });

  return tags;
};


var getCheckUrl = (options) => {
  return url.format({
    hostname: options.hostname,
    port: options.port,
    protocol: options.protocol,
    pathname: [(options.pathname || ''), 'ping'].join('/')
  });
};


var getPort = (port) => {
  return ENV.NODE_PORT || port || 3000;
};


var getAgentId = (name, options) => {
  return `${name}_${getPort(options.port)}`;
};


/**
 * Agent
 *
 * Consul registrator allows to register new service in consul discovery service
 *
 * @param {String} name - Name of registered service.
 * @param {Object} options - Service configuration properties.
 * @returns {Object} Agent
 */
function Agent(name, options) {
  var _consul;
  var opts = Object.assign({}, {
    host: ENV.NODE_HOST || `localhost:${(ENV.NODE_PORT || 3000)}`,
    protocol: 'http',
    port: getPort(),
    consul: {
      interval: '15s'
    }
  }, options);
  var _check = {
    http: getCheckUrl(opts),
    interval: opts.consul.interval
  };
  var _id = getAgentId(name, opts);
  var _tags = createTags(opts);
  opts.consul.promisify = true;
  _consul = consul(opts.consul);

  Object.defineProperties(this, {
    name: {
      value: name,
      enumerable: true
    },
    id: {
      value: _id,
      enumerable: true
    },
    tags: {
      get: function() {
        return _tags;
      },
      set: function(tags) {
        _tags = _tags.concat(tags);
      },
      enumerable: true
    },
    check: {
      value: _check,
      enumerable: true
    },
    consul: {
      value: _consul,
      enumerable: true
    }
  });
}


/**
 * Register
 *
 * @returns {Object} agent
 */
Agent.prototype.register = function register() {
  const self = this;
  const options = {};
  ['name', 'id', 'tags', 'check'].forEach(key => {
    options[key] = self[key];
  });

  debug.info(`attempt to register ${options.name} in discovery service`);

  return promise(function promiseToRegisterService(resolve, reject) {
    self.consul.agent.service.register(options).then(function() {
      agents[self.id] = self;
      debug.info(`sucessfuly register ${options.name} in discovery service`);
      return resolve(self);
    }).catch(function(err) {
      return reject(err);
    });
  });
};


/**
 * Deregister
 *
 * @returns {} undefined
 */
Agent.prototype.deregister = function deregister() {
  const self = this;

  debug.info(`attempt to deregister service ${self.id}`);

  return promise(function promiseToDeregisterService(resolve, reject) {
    self.consul.agent.service.deregister(self.id).then(function() {
      debug.info(`sucessfuly deregister ${self.id} service`);
      return resolve();
    }).catch(function(err) {
      return reject(err);
    });
  });
};


/**
 * @function register
 * Exposing register method on module
 */
Agent.register = function(name, options) {
  const opts = options || {};
  var id = getAgentId(name, opts);
  return (agents[id] || new Agent(name, opts)).register();
};

module.exports = Agent;

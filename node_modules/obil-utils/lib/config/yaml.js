const nodeEnv = process.env.NODE_ENV || 'development';

var yaml = require('js-yaml');
var fs = require('fs');
var debug = require('../core').debug('obil:utils:config');
var _ = require('lodash');
var config = {};
var path = ['/etc/vr/', nodeEnv, '.yaml'].join('');


/**
 * read Reads configuration YAML file
 * @returns {Object} Configuration object
 * @throws {Object} Error
 */
var read = exports.read = () => {
  try {
    config = yaml.safeLoad(fs.readFileSync(path, 'utf8'));
  } catch (err) {
    config = {};
    debug.error('could not load configuration ' + path + ' file');
    throw new ReferenceError('No such file', path);
  }

  return config;
};


/**
 * getProperty Returns value for configuration property
 * @param {String} prop Property i.e. 'redis.media.host'
 * @returns {*} Property value
 */
var getProperty = exports.getProperty = (prop) => {
  if (typeof prop !== 'string') {
    debug.error('wrong type to request confinguration property');
    return false;
  }

  return _.get(config, prop);
};


/**
 * @method load Load configuration from infrastructure conf. file
 * @param {Object} envs Names of environments that provide configuration
 * @param {Object} local Default configuration file
 * @param {Object} configMap Map of properties and YAML keys
 * @returns {Object} Configuration
 */
exports.load = (envs, local, configMap) => {
  // Loading infra config file
  if (envs.indexOf(nodeEnv) > -1) {
    try {
      read('/etc/vr/' + nodeEnv  + '.yaml');
    } catch (e) {
      debug.warn('will attempt to start service using common configuration');
    }

    return _.mergeWith(local, configMap, function(objValue, srcValue) {
      if (typeof srcValue === 'string') {
        return getProperty(srcValue) || objValue;
      }
      return undefined;
    });
  }

  return local;
};

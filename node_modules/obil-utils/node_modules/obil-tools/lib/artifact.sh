#!/bin/bash

# PROJECT_NAME defaults to the name of root folder
PROJECT_NAME=$(basename $PWD)

# BUILD_DIR name of directory where artifact lands
BUILD_DIR="out"

# PACKAGE_VERSION extracting version from package.json
PACKAGE_VERSION=$(cat package.json \
  | grep version \
  | head -1 \
  | awk -F: '{ print $2 }' \
  | sed 's/[", ]//g' )

# ARTIFACT name of artifact archive
ARTIFACT="${PROJECT_NAME}_artifact"

# PROJECT_NAME_VERSIONED name with artifact archive with version
if !([ -z "${PACKAGE_VERSION// }" ]); then
    PROJECT_NAME_VERSIONED="${PROJECT_NAME}-${PACKAGE_VERSION}_artifact"
    PROJECT_NAME_OLD_VERSIONED="${PROJECT_NAME}_artifact_${PACKAGE_VERSION}"
    ARTIFACT_VERSIONED="${PROJECT_NAME_VERSIONED}"
fi

# Removing old artifacts
if [ -f "$BUILD_DIR/$ARTIFACT.tgz" ]; then
    rm "$BUILD_DIR/$ARTIFACT.tgz"
fi
if [ -f "$BUILD_DIR/$ARTIFACT_VERSIONED.tgz" ]; then
    rm "$BUILD_DIR/$ARTIFACT_VERSIONED.tgz"
fi

# Creating Git Sha file
if !([ -z "${GIT_COMMIT}" ]); then
    echo 'HAS GIT_COMMIT'
    echo ${GIT_COMMIT} > .gitsha
fi

# Creating build directory
if !([ -d "$BUILD_DIR" ]); then
    mkdir $BUILD_DIR
fi

# Creating artifacts
cd ..
tar -zcf "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.tgz" --exclude '.git' --exclude ${BUILD_DIR} --exclude 'infra' --exclude 'bin' "${PROJECT_NAME}/"
cp "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.tgz" "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.tar.gz"

if !([ -z "$PROJECT_NAME_VERSIONED" ]); then
    cp "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.tgz" "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT_VERSIONED}.tgz"
    cp "${PROJECT_NAME}/${BUILD_DIR}/${ARTIFACT}.tgz" "${PROJECT_NAME}/${BUILD_DIR}/${PROJECT_NAME_OLD_VERSIONED}.tar.gz"
fi
cd $PROJECT_NAME
